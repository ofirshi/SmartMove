name:  Wpf Continuous Integration

# https://github.com/microsoft/github-actions-for-desktop-apps/blob/main/.github/workflows/ci.yml

# Trigger on every master branch push and pull request
on:
  push:
    types: [opened, synchronize, reopened]
    branches:
      - master
    paths-ignore:
      - '**.md'
      - '**.yml'
  pull_request:
    types: [opened, synchronize, reopened, closed]
    branches:
      - master
    paths-ignore:
      - '**.md'
      - '**.yml'
  
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

      
jobs:
  setup-version:
    runs-on: ${{ matrix.operating-system }}
    env:
      Actions_Allow_Unsecure_Commands: true # Allows AddPAth and SetEnv commands
      DOTNET_NOLOGO: true
      DOTNET_CLI_TELEMETRY_OPTOUT: true
      DOTNET_MULTILEVEL_LOOKUP: true
      DISABLEOUTOFPROCTASKHOST : 1
      Solution_Path: SmartMove.sln
      Wpf_Project_Path: SmartMove\SmartMove.csproj
    strategy:
      fail-fast: false
  #build:
    #strategy:
      matrix:
        targetplatform: [x86, x64]
        configuration: [Debug] #configuration:  [Debug, Release]
        operating-system: [windows-latest] #operating-system: [ubuntu-latest, windows-latest, macOS-latest]
        dotnet-version: ['2.2' ,'3.1.x' , '5.0'] #dotnet-version: ['2.1', '2.2' , '2.2.103', '3.0', '3.1', '3.1.x' , '5.0']

    steps:
    - name: Checkout
      uses: actions/checkout@v2
      with:
        fetch-depth: 0 # avoid shallow clone so nbgv can do its work.
               
    - name: Download a file
      uses: carlosperate/download-file-action@v1.0.3
      id: download-poetry
      with:
        file-url: 'http://downloads.checkpoint.com/dc/download.htm?ID=110747'
        file-name: 'compressors.zip'
        location: '${{ github.workspace }}'
    
    - name: Print the file path download-file-action
      run: echo "The file was downloaded to ${{ steps.download-poetry.outputs.file-path }}"
      
    - uses: suisei-cn/actions-download-file@v1
      id: downloadfile  # Remember to give an ID if you need the output
      name: Download the file
      with:
        url: "http://downloads.checkpoint.com/dc/download.htm?ID=110747"
        target: ${{ github.workspace }}
        auto-match: false

    - name: Print the file path actions-download-file
      run: echo "The file was downloaded to ${{ steps.downloadfile.outputs.file-path }}"
    
    # Use Nerdbank.GitVersioning to set version variables: https://github.com/AArnott/nbgv
    - name: Use Nerdbank.GitVersioning to set version variables
      uses: aarnott/nbgv@v0.3       
      with:
        setAllVars: true

    # Install the .NET Core workload
    - name: Install .NET Core ${{ matrix.dotnet-version }}
      uses: actions/setup-dotnet@v1.6.0 #uses: actions/setup-dotnet@v1
      with:
        dotnet-version: ${{ matrix.dotnet-version }}

    - name: Display dotnet version
      run: dotnet --version
      
    # Add  MsBuild to the PATH: https://github.com/microsoft/setup-msbuild
    - name: Setup MSBuild.exe
      uses: microsoft/setup-msbuild@v1.0.2
      with:
        vs-version: '[16.8,16.9)' # https://cezarypiatek.github.io/post/develop-vsextension-with-github-actions/
        
    - name: echo MSBuild
      run: msbuild -version
      
    - name: Setup Nuget.exe
      uses: warrenbuckley/Setup-Nuget@v1

    #- name: PowerShell enable TLS v1.2
    #  shell: powershell
    #  run: [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12 

    - name: Nuget install
      run: nuget install Microsoft.Xaml.Behaviors.Wpf # JetBrains.System.Windows.Interactivity
      
    - name: Install NuGet PowerShell PackageProvider
      shell: powershell
      run: Install-PackageProvider -Name NuGet -MinimumVersion 2.8.5.201 -Force -Verbose -Scope CurrentUser
    
    - name: Install 7Zip PowerShell Module
      shell: powershell
      run: Install-Module 7Zip4PowerShell -Force -Verbose -Scope CurrentUser -AllowClobber
    
    - name: Display the path
      run: echo %PATH%
      shell: cmd
    
    - name: Extract compressors 
      shell: powershell
      run: Expand-7Zip -ArchiveFileName .\SmartMove\compressors.zip  -TargetPath .\SmartMove\SmartMove\compressors\
      
    # Restore the application
    - name:  Restore the Wpf application to populate the obj folder
      run: msbuild -m $env:Solution_Path /t:Restore /p:Configuration=$env:Configuration /p:RuntimeIdentifier=$env:RuntimeIdentifier
      env:
        Configuration: Debug
        RuntimeIdentifier: win-${{ matrix.targetplatform }}

  
    # Build the Windows Application Packaging project
    - name: Build the Windows Application Packaging Project
      run: msbuild -m $env:Solution_Path /p:Platform=$env:AnyPlatform /p:Configuration=$env:Configuration /p:UapAppxPackageBuildMode=$env:BuildMode /p:AppxBundle=$env:AppxBundle /t:Rebuild
      env:
        AppxBundle: Never
        BuildMode: SideloadOnly
        Configuration: ${{ matrix.configuration }}
        AnyPlatform: "Any CPU"
        DeployExtension: False
    
    - name: Run Fake
      run: dotnet fake build
    
    # Initializes the CodeQL tools for scanning
    - name: Initialize CodeQL
      uses: github/codeql-action/init@v1   
      
    - name: Autobuild
      uses: github/codeql-action/autobuild@v1
    
    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v1
          
    # Test Build the Windows Application  
    - name: Test
      run: dotnet test --no-restore --verbosity normal
